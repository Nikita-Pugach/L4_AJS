// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å async/await
async function fetchWithAsyncAwait(url) {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Request failed with status ${response.status}`);
    }
    return response.json();
}

// ========== –û–ü–ï–†–ê–¶–ò–ò –ò–ó –ü–£–ù–ö–¢–ê A (–ö–û–õ–õ–ë–≠–ö–ò) ==========

// a.i. –ü–æ–ª—É—á–∏—Ç—å /posts –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã –ø–æ–ª—è title
async function getPostsSortedByTitleLengthAsync() {
    try {
        const posts = await fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/posts');
        return posts.sort((a, b) => b.title.length - a.title.length);
    } catch (error) {
        throw error;
    }
}

// a.ii. –ü–æ–ª—É—á–∏—Ç—å /comments –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞
async function getCommentsSortedByNameAsync() {
    try {
        const comments = await fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/comments');
        return comments.sort((a, b) => a.name.localeCompare(b.name));
    } catch (error) {
        throw error;
    }
}

// ========== –û–ü–ï–†–ê–¶–ò–ò –ò–ó –ü–£–ù–ö–¢–ê B (–ü–†–û–ú–ò–°–´) ==========

// b.i. –ü–æ–ª—É—á–∏—Ç—å /users –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
async function getUsersWithSelectedFieldsAsync() {
    try {
        const users = await fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/users');
        return users.map(user => ({
            id: user.id,
            name: user.name,
            username: user.username,
            email: user.email,
            phone: user.phone
        }));
    } catch (error) {
        throw error;
    }
}

// b.ii. –ü–æ–ª—É—á–∏—Ç—å /todos –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ completed === false
async function getIncompleteTodosAsync() {
    try {
        const todos = await fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/todos');
        return todos.filter(todo => !todo.completed);
    } catch (error) {
        throw error;
    }
}

// ========== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô ==========

async function demonstrateAllAsyncOperations() {
    console.log('=== –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –° ASYNC/AWAIT ===\n');

    try {
        // 1. –û–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—É–Ω–∫—Ç–∞ A
        console.log('üìù –û–ü–ï–†–ê–¶–ò–ò –ò–ó –ü–£–ù–ö–¢–ê A:\n');

        // a.i. Posts sorted by title length
        console.log('a.i. Posts - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã title:');
        const sortedPosts = await getPostsSortedByTitleLengthAsync();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ posts: ${sortedPosts.length}`);
        console.log('–¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö title:');
        sortedPosts.slice(0, 3).forEach((post, index) => {
            console.log(`   ${index + 1}. "${post.title}" (${post.title.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        });
        console.log('---\n');

        // a.ii. Comments sorted by name
        console.log('a.ii. Comments - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞:');
        const sortedComments = await getCommentsSortedByNameAsync();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ comments: ${sortedComments.length}`);
        console.log('–ü–µ—Ä–≤—ã–µ 5 –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É:');
        sortedComments.slice(0, 5).forEach((comment, index) => {
            console.log(`   ${index + 1}. ${comment.name} (${comment.email})`);
        });
        console.log('---\n');

        // 2. –û–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—É–Ω–∫—Ç–∞ B
        console.log('üìù –û–ü–ï–†–ê–¶–ò–ò –ò–ó –ü–£–ù–ö–¢–ê B:\n');

        // b.i. Users with selected fields
        console.log('b.i. Users - —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è:');
        const usersWithFields = await getUsersWithSelectedFieldsAsync();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ users: ${usersWithFields.length}`);
        console.log('–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
        console.log(usersWithFields[0]);
        console.log('---\n');

        // b.ii. Incomplete todos
        console.log('b.ii. Todos - —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
        const incompleteTodos = await getIncompleteTodosAsync();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö todos: ${incompleteTodos.length}`);
        console.log('–ü—Ä–∏–º–µ—Ä—ã –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:');
        incompleteTodos.slice(0, 3).forEach(todo => {
            console.log(`   - User ${todo.userId}: "${todo.title}"`);
        });
        console.log('---\n');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    }
}

// ========== –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï ==========

async function demonstrateParallelExecution() {
    console.log('\n‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –ó–ê–ü–†–û–°–û–í:\n');

    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [posts, comments, users, todos] = await Promise.all([
            getPostsSortedByTitleLengthAsync(),
            getCommentsSortedByNameAsync(),
            getUsersWithSelectedFieldsAsync(),
            getIncompleteTodosAsync()
        ]);

        console.log('‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
        console.log(`   - Posts: ${posts.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`   - Comments: ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
        console.log(`   - Users: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log(`   - Todos: ${todos.length} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
        console.log('---\n');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error);
    }
}

// ========== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ==========

async function demonstrateAdvancedAsyncFeatures() {
    console.log('\nüéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò ASYNC/AWAIT:\n');

    try {
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        console.log('1. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –∑–∞–¥–∞—á–∏');
        const users = await getUsersWithSelectedFieldsAsync();
        const todos = await getIncompleteTodosAsync();
        
        const firstUser = users[0];
        const userTodos = todos.filter(todo => todo.userId === firstUser.id);
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstUser.name}`);
        console.log(`üìß Email: ${firstUser.email}`);
        console.log(`‚úÖ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${userTodos.length}`);
        userTodos.slice(0, 3).forEach(todo => {
            console.log(`   - ${todo.title}`);
        });
        console.log('---\n');

        // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        console.log('2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:');
        
        // –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const comments = await getCommentsSortedByNameAsync();
        const commentCountByEmail = {};
        comments.forEach(comment => {
            commentCountByEmail[comment.email] = (commentCountByEmail[comment.email] || 0) + 1;
        });
        
        const topCommenter = Object.entries(commentCountByEmail)
            .sort(([,a], [,b]) => b - a)[0];
        
        console.log(`üí¨ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä: ${topCommenter[0]} (${topCommenter[1]} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const posts = await getPostsSortedByTitleLengthAsync();
        const titleLengths = posts.map(post => post.title.length);
        const avgTitleLength = titleLengths.reduce((a, b) => a + b) / titleLengths.length;
        
        console.log(`üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${avgTitleLength.toFixed(2)} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`üìè –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${Math.max(...titleLengths)} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`üìè –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${Math.min(...titleLengths)} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log('---\n');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
}

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

async function demonstrateErrorHandling() {
    console.log('\nüõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö:\n');

    try {
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É URL
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ—Å—É—Ä—Å—É...');
        await fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/nonexistent');
        
    } catch (error) {
        console.log('‚úÖ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞:');
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    console.log('\n–†–∞–±–æ—Ç–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏:');
    
    const results = await Promise.allSettled([
        getPostsSortedByTitleLengthAsync(),
        fetchWithAsyncAwait('https://invalid-url'),
        getUsersWithSelectedFieldsAsync(),
        fetchWithAsyncAwait('https://jsonplaceholder.typicode.com/invalid')
    ]);

    results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
            console.log(`   ‚úÖ –ó–∞–ø—Ä–æ—Å ${index + 1}: –£—Å–ø–µ—Ö (${result.value.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        } else {
            console.log(`   ‚ùå –ó–∞–ø—Ä–æ—Å ${index + 1}: –û—à–∏–±–∫–∞ - ${result.reason.message}`);
        }
    });
}

// ========== –ó–ê–ü–£–°–ö –í–°–ï–• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ô ==========

async function runAllDemonstrations() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ô ASYNC/AWAIT\n');
    
    await demonstrateAllAsyncOperations();
    await demonstrateParallelExecution();
    await demonstrateAdvancedAsyncFeatures();
    await demonstrateErrorHandling();
    
    console.log('\nüéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
runAllDemonstrations().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});