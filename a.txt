// Функция для выполнения GET-запросов с помощью коллбэков
function fetchWithCallback(url, callback) {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function() {
        if (xhr.status === 200) {
            callback(null, JSON.parse(xhr.responseText));
        } else {
            callback(new Error(`Request failed with status ${xhr.status}`), null);
        }
    };
    xhr.onerror = function() {
        callback(new Error('Request failed'), null);
    };
    xhr.send();
}

// 1. Получить /posts и отсортировать по убыванию длины поля title
function getPostsSortedByTitleLength(callback) {
    fetchWithCallback('https://jsonplaceholder.typicode.com/posts', (error, posts) => {
        if (error) {
            callback(error, null);
            return;
        }
        
        // Сортируем по убыванию длины title
        const sortedPosts = posts.sort((a, b) => b.title.length - a.title.length);
        callback(null, sortedPosts);
    });
}

// 2. Получить /comments и отсортировать по имени автора
function getCommentsSortedByName(callback) {
    fetchWithCallback('https://jsonplaceholder.typicode.com/comments', (error, comments) => {
        if (error) {
            callback(error, null);
            return;
        }
        
        // Сортируем по имени автора (поле name)
        const sortedComments = comments.sort((a, b) => a.name.localeCompare(b.name));
        callback(null, sortedComments);
    });
}

// Демонстрация работы функций
console.log('=== Начало выполнения с коллбэками ===\n');

// Тестируем получение и сортировку posts
getPostsSortedByTitleLength((error, posts) => {
    if (error) {
        console.error('Ошибка при получении posts:', error);
    } else {
        console.log('1. Posts отсортированы по убыванию длины title:');
        console.log('Всего posts:', posts.length);
        console.log('Первые 3 posts:');
        posts.slice(0, 3).forEach((post, index) => {
            console.log(`${index + 1}. Title: "${post.title}" (длина: ${post.title.length})`);
        });
        console.log('---');
    }
});

// Тестируем получение и сортировку comments
getCommentsSortedByName((error, comments) => {
    if (error) {
        console.error('Ошибка при получении comments:', error);
    } else {
        console.log('2. Comments отсортированы по имени автора:');
        console.log('Всего comments:', comments.length);
        console.log('Первые 5 comments:');
        comments.slice(0, 5).forEach((comment, index) => {
            console.log(`${index + 1}. Name: "${comment.name}", Email: ${comment.email}`);
        });
        console.log('---');
    }
});

// Функция для последовательного выполнения с выводом в консоль
function demonstrateCallbacks() {
    console.log('\n=== Последовательное выполнение ===');
    
    getPostsSortedByTitleLength((error, posts) => {
        if (error) {
            console.error('Ошибка:', error);
            return;
        }
        
        console.log('✓ Posts получены и отсортированы');
        console.log('Самый длинный title:', posts[0].title.substring(0, 50) + '...');
        
        // После получения posts получаем comments
        getCommentsSortedByName((error, comments) => {
            if (error) {
                console.error('Ошибка:', error);
                return;
            }
            
            console.log('✓ Comments получены и отсортированы');
            console.log('Первый автор по алфавиту:', comments[0].name);
            console.log('Последний автор по алфавиту:', comments[comments.length - 1].name);
        });
    });
}

// Запускаем последовательное выполнение через 2 секунды
setTimeout(demonstrateCallbacks, 2000);